import openai
import telebot
from telebot import types
import threading
from threading import Timer
import requests
import json
import datetime

bot = telebot.TeleBot("")
apiKeyOpenai = ''
openai.api_key = apiKeyOpenai

USER_EXAMPLE = {
    "telegram_chat_id": 0,
    "telegram_name": "",
    "name": "",
    "text": "",
    "status_id": 1,
    "age": 0,
    "city": "",
    "photos": [],
    "words": []
}

ALL_USERS = dict()

def firstLetterUp(str):
    return str[0].upper() + str[1:]

def send_info_to_api(ALL_USERS, id):
    data = json.dumps(ALL_USERS[f'{id}'])
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
    response = requests.request("POST", 'http://k92900u9.beget.tech/bot/create_user.php', headers=headers, data=data)
    print(response)
    response = response.json()
    print(response)
    ALL_USERS.pop(f'{id}')

def essay(message):
    bot.send_message(message.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑! üòé\n–°–µ–π—á–∞—Å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å...')
    t = Timer(10.0, essayKeywords, [message])
    t.start() 

def essayKeywords(message):
    try:
        a = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": f'{message.text}\n–Ω–∞–ø–∏—à–∏ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞, –≤—ã–≤–µ–¥–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –±–µ–∑ —Ç–∏—Ä–µ, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞—á–∏–Ω–∞—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã'}
            ]
        )
        a = a.choices[0].message.content

        # a = '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–∞–∑–≤–∏—Ç–∏–µ, –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø—ã—Ç, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.'

        print(a)
        aa = a.split(',')
        print(aa)
    except:
        a = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        print(a)
        aa = ['–Ω–µ —É–∫–∞–∑–∞–Ω–æ']
        print(aa)
    
    ALL_USERS[f'{message.chat.id}'] = dict(USER_EXAMPLE)
    ALL_USERS[f'{message.chat.id}']['words'] = aa
    ALL_USERS[f'{message.chat.id}']['telegram_chat_id'] = int(message.chat.id) 
    if message.from_user.username == None:
        ALL_USERS[f'{message.chat.id}']['telegram_name'] = 'none'
    else:
        ALL_USERS[f'{message.chat.id}']['telegram_name'] = message.from_user.username
    ALL_USERS[f'{message.chat.id}']['name'] = message.from_user.first_name

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data='continue_registration')
    markup.add(button)
    s = '\n'
    bot.send_message(message.chat.id, f'ü§ñ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–∞—à–ª–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—ç–≥–∏:\n    ‚ûñ {f"{s}    ‚ûñ ".join([firstLetterUp(word.strip()) for word in aa])}', reply_markup=markup)



def getAge(message):
    try:
        ALL_USERS[f'{message.chat.id}']['age'] = int(message.text)
    except:
        ALL_USERS[f'{message.chat.id}']['age'] = 0

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–Ø - –æ–¥–∏–Ω, –∏—â—É —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='whatYourFind_1')
    markup.add(button1)
    button2 = types.InlineKeyboardButton("–Ø - –æ–¥–∏–Ω, –∏—â—É –∫–æ–º–∞–Ω–¥—É", callback_data='whatYourFind_2')
    markup.add(button2)
    button3 = types.InlineKeyboardButton("–ú—ã - –∫–æ–º–∞–Ω–¥–∞, –∏—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='whatYourFind_3')
    markup.add(button3)
    bot.send_message(message.chat.id, 'ü§ñ –û—Ç–ª–∏—á–Ω–æ, –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω—è—Ç!\n‚úèÔ∏è –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=markup)


def getCity(message):
    if message.text == None:
        ALL_USERS[f'{message.chat.id}']['city'] = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    else:
        ALL_USERS[f'{message.chat.id}']['city'] = message.text

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("üñº –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å", callback_data='get_photo')
    markup.add(button)
    bot.send_message(message.chat.id, 'üì∏ –¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=markup)


def getPhoto(message):
    try:
        photoId = message.photo[-1].file_id
    except:
        photoId = 'AgACAgIAAxkBAAIB_2R5p39S_bgirrvMYSG5hIwAAR6VbAACwsUxG0scyEsWxiTNOMFY6gEAAwIAA3gAAy8E'

    ALL_USERS[f'{message.chat.id}']['photos'] = [photoId]

    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='finish')
    markup.add(button)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–æ–ª–Ω–∏–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üòé', reply_markup=markup)













@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == 'continue_registration':
        msg = bot.send_message(call.message.chat.id, '‚úèÔ∏è –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        bot.register_next_step_handler(msg, getAge)
    elif call.data == 'get_photo':
        msg = bot.send_message(call.message.chat.id, 'ü§ñ–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º')
        bot.register_next_step_handler(msg, getPhoto)
    elif call.data == 'whatYourFind_1' or call.data == 'whatYourFind_2' or call.data == 'whatYourFind_3':
        if call.data == 'whatYourFind_1':
            status_id = 1
        elif call.data == 'whatYourFind_2':
            status_id = 2
        elif call.data == 'whatYourFind_3':
            status_id = 3
        ALL_USERS[f'{call.message.chat.id}']['status_id'] = status_id
        msg = bot.send_message(call.message.chat.id, 'üìù –ê –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤—ë—à—å? \n‚ùî –ï—Å–ª–∏ —É —Ç–µ–±—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        bot.register_next_step_handler(msg, getCity)

    elif call.data == 'finish':
        send_info_to_api(ALL_USERS, call.message.chat.id)        
        print(ALL_USERS)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("ü™™ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
        markup.add(button1)
        button2 = types.InlineKeyboardButton("‚úàÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data='recommendation')
        markup.add(button2)
        button3 = types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data='random')
        markup.add(button3)
        bot.send_message(call.message.chat.id, 'üè† –ú–µ–Ω—é:', reply_markup=markup)

    elif call.data == 'go_home':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("ü™™ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
        markup.add(button1)
        button2 = types.InlineKeyboardButton("‚úàÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data='recommendation')
        markup.add(button2)
        button3 = types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data='random')
        markup.add(button3)
        bot.send_message(call.message.chat.id, 'üè† –ú–µ–Ω—é:', reply_markup=markup)

    elif call.data == 'profile':
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
            response = requests.request("GET", f'http://k92900u9.beget.tech/bot/get_user_by_chat.php?id={str(call.message.chat.id)}', headers=headers)
            print(response)
            response = response.json()
            print(response)
            s = '\n'
            caption = f'üë§ {response["name"]}\nüî¢ {response["age"]}\n\nüî† –¢—ç–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n    ‚ûñ {f"{s}    ‚ûñ ".join([firstLetterUp(word.strip()) for word in response["words"]])}\n\nüèô {response["city"]}\n\nüóØ {response["status"]}'
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='go_home')
            markup.add(button1)
            bot.send_photo(str(response['telegram_chat_id']), response['photos'][0], caption, reply_markup=markup)
        except Exception as e:
            bot.send_message(call.message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n```\n{e}\n```\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ —ç—Ç—É –æ—à–∏–±–∫—É –ª–∏–±–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚Äî @chesnokpeter')

    elif call.data == 'recommendation':
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
            response = requests.request("GET", f'http://k92900u9.beget.tech/bot/get_user_by_chat.php?id={call.message.chat.id}', headers=headers)
            response = response.json()
            print(response)
            iddb = response["id"]
            words = response["words"]
            data = json.dumps({
                "seeker_id" : iddb,
                "words" : words
            })
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
            response = requests.request("POST", 'http://k92900u9.beget.tech/bot/similar_user.php', headers=headers, data=data)
            print(response)
            response = response.json()
            print(response)
            contact = response["telegram_name"]
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è", callback_data=f'accept|{contact}')
            button2 = types.InlineKeyboardButton("‚ùå", callback_data='recommendation')
            markup.add(button1, button2)
            button3 = types.InlineKeyboardButton("üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='go_home')
            markup.add(button3)
            s = '\n'
            caption = f'üë§ {response["name"]}\nüî¢ {response["age"]}\n\nüî† –¢—ç–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n    ‚ûñ {f"{s}    ‚ûñ ".join([firstLetterUp(word.strip()) for word in response["words"]])}\n\nüèô {response["city"]}\n\nüóØ {response["status"]}'
            bot.send_photo(call.message.chat.id, response['photos'][0], caption, reply_markup=markup)
        except:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='go_home')
            markup.add(button1)
            bot.send_message(call.message.chat.id, 'üòî –≠—Ö, –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', reply_markup=markup)


    elif call.data == 'random':
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
            response = requests.request("GET", f'http://k92900u9.beget.tech/bot/get_user_by_chat.php?id={call.message.chat.id}', headers=headers)
            response = response.json()
            print(response)
            iddb = response["id"]
            response = requests.request("GET", f'http://k92900u9.beget.tech/bot/fast_search.php?id={iddb}', headers=headers)
            print(response)
            response = response.json()
            print(response)
            contact = response["telegram_name"]
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è", callback_data=f'accept|{contact}')
            button2 = types.InlineKeyboardButton("üé≤", callback_data='random')
            markup.add(button1, button2)
            button3 = types.InlineKeyboardButton("üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='go_home')
            markup.add(button3)
            s = '\n'
            caption = f'üë§ {response["name"]}\nüî¢ {response["age"]}\n\nüî† –¢—ç–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n    ‚ûñ {f"{s}    ‚ûñ ".join([firstLetterUp(word.strip()) for word in response["words"]])}\n\nüèô {response["city"]}\n\nüóØ {response["status"]}'
            bot.send_photo(call.message.chat.id, response['photos'][0], caption, reply_markup=markup)
        except:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='go_home')
            markup.add(button1)
            bot.send_message(call.message.chat.id, 'üòî –≠—Ö, –≤ –±–æ—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å...', reply_markup=markup)


    else:
        try:
            accept = call.data.split('|')
            accept = accept[1]

            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='go_home')
            markup.add(button1)
            bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ö–æ–º–∞–Ω–¥–∞ "–§—Ä—ç–Ω–¥UP" —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ üòé')
            bot.send_message(call.message.chat.id, f'Telegram-–ø—Ä–æ—Ñ–∏–ª—å: @{accept}')
            bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ üí™üèª', reply_markup=markup)
        except:
            pass







@bot.message_handler(commands=['start'])
def start_message(message):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
    response = requests.request("GET", f'http://k92900u9.beget.tech/bot/get_user_by_chat.php?id={message.chat.id}', headers=headers)

    with open('textdata/start.txt', 'a+') as data:
        print(f'{datetime.datetime.now()}    @{message.from_user.username}    {message.chat.id}    /start', file=data)

    if response.status_code == 404:
        bot.send_message(message.chat.id, 'üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –§—Ä–µ–Ω–¥UP ü§ñ\n–û–Ω —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º üîé')
        bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ ü§ñ\n–≠—Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ‚ùóÔ∏è\n–¢–µ–±–µ –Ω—É–∂–Ω–æ: \n    ‚ûñ–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ —Å–µ–±—è –∏–ª–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É. –í –Ω—ë–º –Ω—É–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ –æ –ø–ª–∞–Ω–∞ –Ω–∞ –±—É–¥—É—â–µ–µ;\n    ‚ûñ–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –∏–ª–∏ —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç;\n    ‚ûñ –£–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç;\n    ‚ûñ –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')
        msg = bot.send_message(message.chat.id, '–ß—Ç–æ –∂, –ø—Ä–∏—Å—Ç—É–ø–∏–º!\n‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ\n‚ùì–ù–∞–ø–∏—à–∏ —Ç–æ, —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–∏—à–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç')
        bot.register_next_step_handler(msg, essay)
    else:    
        # bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("ü™™ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
        markup.add(button1)
        button2 = types.InlineKeyboardButton("‚úàÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data='recommendation')
        markup.add(button2)
        button3 = types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data='random')
        markup.add(button3)
        bot.send_message(message.chat.id, 'üè† –ú–µ–Ω—é:', reply_markup=markup)




@bot.message_handler(commands=['about'])
def start_message(message):
    bot.send_message(message.chat.id, 'üßëüèª‚Äçüíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:\nchesnok @chesnokpeter;\n–ê–Ω—Ç–æ–Ω –î–∞—Ö–∏–Ω @gg_ad;')



@bot.message_handler(content_types=['text'])
def send_echo(message):
    pass













if __name__=='__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            with open('textdata/exception.txt', 'a+') as errors:
                print(f'{datetime.datetime.now()}    {e}', file=errors)
            print(e)
            continue
# bot.polling(none_stop=True, interval=0)




